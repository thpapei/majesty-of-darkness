{"version":3,"sources":["firebase/firebase.js","components/LoginPage.js","state/slices/authSlice.js","components/App.js","state/createStore.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","googleAuthProvider","auth","GoogleAuthProvider","firestore","startLogin","a","signInWithPopup","console","log","message","startLogout","signOut","LoginPage","onClick","authSlice","createSlice","name","initialState","reducers","logIn","state","action","uid","payload","logOut","actions","App","dispatch","useDispatch","useEffect","onAuthStateChanged","user","className","store","configureStore","reducer","game","authReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAcAA,IAASC,cAVc,CACrBC,OAAQC,0CACRC,WAAYD,0CACZE,YAAaF,iDACbG,UAAWH,0BACXI,cAAeJ,sCACfK,kBAAmBL,cACnBM,MAAON,6CAIT,IAAMO,EAAqB,IAAIV,IAASW,KAAKC,mBAGvCD,GADWX,IAASa,YACbb,IAASW,QAETG,EAAU,uCAAG,sBAAAC,EAAA,wFAEfJ,EAAKK,gBAAgBN,IAFN,gCAItBO,QAAQC,IAAI,iBAAkB,KAAMC,SAJd,wDAAH,qDAQVC,EAAW,uCAAG,sBAAAL,EAAA,wFAEhBJ,EAAKU,WAFW,wFAAH,qDCjBTC,EAVG,WAEhB,OACE,qCACE,wBAAQC,QAAS,kBAAMT,KAAvB,mBACA,wBAAQS,QAAS,kBAAMH,KAAvB,wB,gBCJAI,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAAc,GACdC,SAAU,CACRC,MAAO,SAACC,EAAOC,GAAaD,EAAME,IAAMD,EAAOE,SAC/CC,OAAQ,SAACJ,EAAOC,IAAqB,Q,EAOrCP,EAAUW,QAFZN,E,EAAAA,MACAK,E,EAAAA,OAEaV,IAAf,QCWeY,EApBH,WACV,IAAMC,EAAWC,cAWjB,OATAC,qBAAU,WACR5B,EAAK6B,oBAAmB,SAAAC,GAEpBJ,EADEI,EACOZ,EAAMY,EAAKT,KAEXE,WAKb,sBAAKQ,UAAU,MAAf,UACE,qCACA,cAAC,EAAD,QCZSC,EANDC,YAAe,CAC3BC,QAAS,CACPC,KAAMC,KCOKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJiB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f16dcba2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\nconst database = firebase.firestore();\nconst auth = firebase.auth();\n\nexport const startLogin = async () => {\n  try {\n    return auth.signInWithPopup(googleAuthProvider);\n  } catch (error) {\n    console.log('Login failed: ', error.message);\n  }\n}\n\nexport const startLogout = async () => {\n  try {\n    return auth.signOut();\n  } catch (error) {\n\n  }\n}\n\nexport { googleAuthProvider, database, auth };","import { startLogin, startLogout } from '../firebase/firebase';\nconst LoginPage = () => {\n\n  return (\n    <>\n      <button onClick={() => startLogin()}>Login</button>\n      <button onClick={() => startLogout()}>Logout</button>\n    </>\n  )\n};\n\nexport default LoginPage;","import { createSlice } from '@reduxjs/toolkit';\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {},\n  reducers: {\n    logIn: (state, action) => { state.uid = action.payload },\n    logOut: (state, action) => { state = {} }\n  },\n});\n\nexport const {\n  logIn,\n  logOut\n} = authSlice.actions;\nexport default authSlice.reducer;","import React, { useEffect } from 'react';\nimport LoginPage from './LoginPage';\nimport { auth } from './../firebase/firebase';\nimport { useDispatch } from 'react-redux';\nimport { logIn, logOut } from '../state/slices/authSlice';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        dispatch(logIn(user.uid))\n      } else {\n        dispatch(logOut());\n      }\n    });\n  })\n  return (\n    <div className=\"App\">\n      <h1>App</h1>\n      <LoginPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './slices/authSlice';\n\nconst store = configureStore({\n  reducer: {\n    game: authReducer\n  }\n})\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './state/createStore';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}